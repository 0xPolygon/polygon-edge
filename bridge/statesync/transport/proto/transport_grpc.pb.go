// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SignedMessageTransportClient is the client API for SignedMessageTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignedMessageTransportClient interface {
	Publish(ctx context.Context, in *SignedMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type signedMessageTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewSignedMessageTransportClient(cc grpc.ClientConnInterface) SignedMessageTransportClient {
	return &signedMessageTransportClient{cc}
}

func (c *signedMessageTransportClient) Publish(ctx context.Context, in *SignedMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.SignedMessageTransport/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignedMessageTransportServer is the server API for SignedMessageTransport service.
// All implementations must embed UnimplementedSignedMessageTransportServer
// for forward compatibility
type SignedMessageTransportServer interface {
	Publish(context.Context, *SignedMessage) (*empty.Empty, error)
	mustEmbedUnimplementedSignedMessageTransportServer()
}

// UnimplementedSignedMessageTransportServer must be embedded to have forward compatible implementations.
type UnimplementedSignedMessageTransportServer struct {
}

func (UnimplementedSignedMessageTransportServer) Publish(context.Context, *SignedMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedSignedMessageTransportServer) mustEmbedUnimplementedSignedMessageTransportServer() {
}

// UnsafeSignedMessageTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignedMessageTransportServer will
// result in compilation errors.
type UnsafeSignedMessageTransportServer interface {
	mustEmbedUnimplementedSignedMessageTransportServer()
}

func RegisterSignedMessageTransportServer(s grpc.ServiceRegistrar, srv SignedMessageTransportServer) {
	s.RegisterService(&_SignedMessageTransport_serviceDesc, srv)
}

func _SignedMessageTransport_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignedMessageTransportServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SignedMessageTransport/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignedMessageTransportServer).Publish(ctx, req.(*SignedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignedMessageTransport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SignedMessageTransport",
	HandlerType: (*SignedMessageTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _SignedMessageTransport_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/statesync/transport/proto/transport.proto",
}
