// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolybftClient is the client API for Polybft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolybftClient interface {
	ConsensusSnapshot(ctx context.Context, in *ConsensusSnapshotRequest, opts ...grpc.CallOption) (*ConsensusSnapshotResponse, error)
	Bridge(ctx context.Context, in *BridgeRequest, opts ...grpc.CallOption) (*BridgeResponse, error)
	BridgeCall(ctx context.Context, in *BridgeCallRequest, opts ...grpc.CallOption) (*BridgeCallResponse, error)
}

type polybftClient struct {
	cc grpc.ClientConnInterface
}

func NewPolybftClient(cc grpc.ClientConnInterface) PolybftClient {
	return &polybftClient{cc}
}

func (c *polybftClient) ConsensusSnapshot(ctx context.Context, in *ConsensusSnapshotRequest, opts ...grpc.CallOption) (*ConsensusSnapshotResponse, error) {
	out := new(ConsensusSnapshotResponse)
	err := c.cc.Invoke(ctx, "/proto.Polybft/ConsensusSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polybftClient) Bridge(ctx context.Context, in *BridgeRequest, opts ...grpc.CallOption) (*BridgeResponse, error) {
	out := new(BridgeResponse)
	err := c.cc.Invoke(ctx, "/proto.Polybft/Bridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polybftClient) BridgeCall(ctx context.Context, in *BridgeCallRequest, opts ...grpc.CallOption) (*BridgeCallResponse, error) {
	out := new(BridgeCallResponse)
	err := c.cc.Invoke(ctx, "/proto.Polybft/BridgeCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolybftServer is the server API for Polybft service.
// All implementations must embed UnimplementedPolybftServer
// for forward compatibility
type PolybftServer interface {
	ConsensusSnapshot(context.Context, *ConsensusSnapshotRequest) (*ConsensusSnapshotResponse, error)
	Bridge(context.Context, *BridgeRequest) (*BridgeResponse, error)
	BridgeCall(context.Context, *BridgeCallRequest) (*BridgeCallResponse, error)
	mustEmbedUnimplementedPolybftServer()
}

// UnimplementedPolybftServer must be embedded to have forward compatible implementations.
type UnimplementedPolybftServer struct {
}

func (UnimplementedPolybftServer) ConsensusSnapshot(context.Context, *ConsensusSnapshotRequest) (*ConsensusSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusSnapshot not implemented")
}
func (UnimplementedPolybftServer) Bridge(context.Context, *BridgeRequest) (*BridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridge not implemented")
}
func (UnimplementedPolybftServer) BridgeCall(context.Context, *BridgeCallRequest) (*BridgeCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCall not implemented")
}
func (UnimplementedPolybftServer) mustEmbedUnimplementedPolybftServer() {}

// UnsafePolybftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolybftServer will
// result in compilation errors.
type UnsafePolybftServer interface {
	mustEmbedUnimplementedPolybftServer()
}

func RegisterPolybftServer(s grpc.ServiceRegistrar, srv PolybftServer) {
	s.RegisterService(&Polybft_ServiceDesc, srv)
}

func _Polybft_ConsensusSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolybftServer).ConsensusSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Polybft/ConsensusSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolybftServer).ConsensusSnapshot(ctx, req.(*ConsensusSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polybft_Bridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolybftServer).Bridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Polybft/Bridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolybftServer).Bridge(ctx, req.(*BridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polybft_BridgeCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolybftServer).BridgeCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Polybft/BridgeCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolybftServer).BridgeCall(ctx, req.(*BridgeCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Polybft_ServiceDesc is the grpc.ServiceDesc for Polybft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Polybft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Polybft",
	HandlerType: (*PolybftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsensusSnapshot",
			Handler:    _Polybft_ConsensusSnapshot_Handler,
		},
		{
			MethodName: "Bridge",
			Handler:    _Polybft_Bridge_Handler,
		},
		{
			MethodName: "BridgeCall",
			Handler:    _Polybft_BridgeCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensus/polybft/proto/polybft.proto",
}
