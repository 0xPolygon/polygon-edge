// Code generated by scapi/gen. DO NOT EDIT.
package contractsapi

import (
	"math/big"

	"github.com/0xPolygon/polygon-edge/types"
	"github.com/umbracle/ethgo"
	"github.com/umbracle/ethgo/abi"
)

var (
	_ = big.NewInt
	_ = types.Address{}
	_ = ethgo.Log{}
)

var (
	commitType = abi.MustNewMethod("function commit(tuple(uint256 startId,uint256 endId,bytes32 root) commitment,bytes signature,bytes bitmap)") //nolint:all
)

type Commitment struct {
	StartID *big.Int   `abi:"startId"`
	EndID   *big.Int   `abi:"endId"`
	Root    types.Hash `abi:"root"`
}

type Commit struct {
	Commitment Commitment `abi:"commitment"`
	Signature  []byte     `abi:"signature"`
	Bitmap     []byte     `abi:"bitmap"`
}

func (c *Commit) EncodeAbi() ([]byte, error) {
	return commitType.Encode(c)
}

func (c *Commit) DecodeAbi(buf []byte) error {
	return decodeMethod(commitType, buf, c)
}

var (
	executeType = abi.MustNewMethod("function execute(bytes32[] proof,tuple(uint256 id,address sender,address receiver,bytes data) obj)") //nolint:all
)

type Obj struct {
	ID       *big.Int      `abi:"id"`
	Sender   types.Address `abi:"sender"`
	Receiver types.Address `abi:"receiver"`
	Data     []byte        `abi:"data"`
}

type Execute struct {
	Proof []types.Hash `abi:"proof"`
	Obj   Obj          `abi:"obj"`
}

func (e *Execute) EncodeAbi() ([]byte, error) {
	return executeType.Encode(e)
}

func (e *Execute) DecodeAbi(buf []byte) error {
	return decodeMethod(executeType, buf, e)
}

var (
	StateSyncResultEventType = abi.MustNewEvent("event StateSyncResult(uint256 indexed counter,bool indexed status,bytes message)") //nolint:all
)

type StateSyncResultEvent struct {
	Counter *big.Int `abi:"counter"`
	Status  bool     `abi:"status"`
	Message []byte   `abi:"message"`
}

func (S *StateSyncResultEvent) ParseLog(log *ethgo.Log) error {
	return decodeEvent(StateSyncResultEventType, log, S)
}

var (
	NewCommitmentEventType = abi.MustNewEvent("event NewCommitment(uint256 indexed startId,uint256 indexed endId,bytes32 root)") //nolint:all
)

type NewCommitmentEvent struct {
	StartID *big.Int   `abi:"startId"`
	EndID   *big.Int   `abi:"endId"`
	Root    types.Hash `abi:"root"`
}

func (N *NewCommitmentEvent) ParseLog(log *ethgo.Log) error {
	return decodeEvent(NewCommitmentEventType, log, N)
}

var (
	commitEpochType = abi.MustNewMethod("function commitEpoch(uint256 id,tuple(uint256 startBlock,uint256 endBlock,bytes32 epochRoot) epoch,tuple(uint256 epochId,tuple(address validator,uint256 signedBlocks)[] uptimeData,uint256 totalBlocks) uptime)") //nolint:all
)

type Epoch struct {
	StartBlock *big.Int   `abi:"startBlock"`
	EndBlock   *big.Int   `abi:"endBlock"`
	EpochRoot  types.Hash `abi:"epochRoot"`
}

type UptimeData struct {
	Validator    types.Address `abi:"validator"`
	SignedBlocks *big.Int      `abi:"signedBlocks"`
}

type Uptime struct {
	EpochID     *big.Int     `abi:"epochId"`
	UptimeData  []UptimeData `abi:"uptimeData"`
	TotalBlocks *big.Int     `abi:"totalBlocks"`
}

type CommitEpoch struct {
	ID     *big.Int `abi:"id"`
	Epoch  Epoch    `abi:"epoch"`
	Uptime Uptime   `abi:"uptime"`
}

func (c *CommitEpoch) EncodeAbi() ([]byte, error) {
	return commitEpochType.Encode(c)
}

func (c *CommitEpoch) DecodeAbi(buf []byte) error {
	return decodeMethod(commitEpochType, buf, c)
}

var (
	syncStateType = abi.MustNewMethod("function syncState(address receiver,bytes data)") //nolint:all
)

type SyncState struct {
	Receiver types.Address `abi:"receiver"`
	Data     []byte        `abi:"data"`
}

func (s *SyncState) EncodeAbi() ([]byte, error) {
	return syncStateType.Encode(s)
}

func (s *SyncState) DecodeAbi(buf []byte) error {
	return decodeMethod(syncStateType, buf, s)
}

var (
	StateSyncedEventType = abi.MustNewEvent("event StateSynced(uint256 indexed id,address indexed sender,address indexed receiver,bytes data)") //nolint:all
)

type StateSyncedEvent struct {
	ID       *big.Int      `abi:"id"`
	Sender   types.Address `abi:"sender"`
	Receiver types.Address `abi:"receiver"`
	Data     []byte        `abi:"data"`
}

func (S *StateSyncedEvent) ParseLog(log *ethgo.Log) error {
	return decodeEvent(StateSyncedEventType, log, S)
}

var (
	submitType = abi.MustNewMethod("function submit(uint256 chainId,tuple(bytes32 blockHash,uint256 blockRound,bytes32 currentValidatorSetHash) checkpointMetadata,tuple(uint256 epoch,uint256 blockNumber,bytes32 eventRoot) checkpoint,uint256[2] signature,tuple(address _address,uint256[4] blsKey,uint256 votingPower)[] newValidatorSet,bytes bitmap)") //nolint:all
)

type CheckpointMetadata struct {
	BlockHash               types.Hash `abi:"blockHash"`
	BlockRound              *big.Int   `abi:"blockRound"`
	CurrentValidatorSetHash types.Hash `abi:"currentValidatorSetHash"`
}

type Checkpoint struct {
	Epoch       *big.Int   `abi:"epoch"`
	BlockNumber *big.Int   `abi:"blockNumber"`
	EventRoot   types.Hash `abi:"eventRoot"`
}

type NewValidatorSet struct {
	_address    types.Address `abi:"_address"`
	BlsKey      [4]*big.Int   `abi:"blsKey"`
	VotingPower *big.Int      `abi:"votingPower"`
}

type Submit struct {
	ChainID            *big.Int           `abi:"chainId"`
	CheckpointMetadata CheckpointMetadata `abi:"checkpointMetadata"`
	Checkpoint         Checkpoint         `abi:"checkpoint"`
	Signature          [2]*big.Int        `abi:"signature"`
	NewValidatorSet    []NewValidatorSet  `abi:"newValidatorSet"`
	Bitmap             []byte             `abi:"bitmap"`
}

func (s *Submit) EncodeAbi() ([]byte, error) {
	return submitType.Encode(s)
}

func (s *Submit) DecodeAbi(buf []byte) error {
	return decodeMethod(submitType, buf, s)
}
