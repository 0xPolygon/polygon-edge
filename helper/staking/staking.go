package staking

import (
	"fmt"
	"math"
	"math/big"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
)

var (
	MinValidatorCount = uint32(1)
	MaxValidatorCount = uint32(math.MaxUint32)
)

// PadLeftOrTrim left-pads the passed in byte array to the specified size,
// or trims the array if it exceeds the passed in size
func PadLeftOrTrim(bb []byte, size int) []byte {
	l := len(bb)
	if l == size {
		return bb
	}

	if l > size {
		return bb[l-size:]
	}

	tmp := make([]byte, size)
	copy(tmp[size-l:], bb)

	return tmp
}

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		PadLeftOrTrim(address.Bytes(), 32),
		PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(address, addressToIsValidatorSlot)
	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(address, addressToStakedAmountSlot)
	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(address, addressToValidatorIndexSlot)

	// Get the indexes for _validators, _stakedAmount
	// Index for regular types is calculated as just the regular slot
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.ValidatorsArraySizeIndex = []byte{byte(validatorsSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint32
	MaxValidatorCount uint32
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorsArraySizeIndex     []byte // []address size
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
	MinAndMaxNumValidatorsIndex  []byte // uint256
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minAndMaxNumValidator       = int64(5) // Slot 5
)

const (
	DefaultStakedBalance = "0x8AC7230489E80000" // 10 ETH
	//nolint: lll
	StakingSCBytecode = "0x6080604052600436106100f75760003560e01c80637dceceb81161008a578063e387a7ed11610059578063e387a7ed14610381578063e804fbf6146103ac578063f90ecacc146103d7578063facd743b1461041457610165565b80637dceceb8146102c3578063af6da36e14610300578063c795c0771461032b578063ca1e78191461035657610165565b8063373d6132116100c6578063373d6132146102385780633a4b66f114610263578063714ff4251461026d5780637a6eea371461029857610165565b806302b751991461016a578063065ae171146101a75780632367f6b5146101e45780632def66201461022157610165565b366101655761011b3373ffffffffffffffffffffffffffffffffffffffff16610451565b1561015b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101529061125b565b60405180910390fd5b610163610464565b005b600080fd5b34801561017657600080fd5b50610191600480360381019061018c9190610faa565b610644565b60405161019e9190611296565b60405180910390f35b3480156101b357600080fd5b506101ce60048036038101906101c99190610faa565b61065c565b6040516101db91906111c0565b60405180910390f35b3480156101f057600080fd5b5061020b60048036038101906102069190610faa565b61067c565b6040516102189190611296565b60405180910390f35b34801561022d57600080fd5b506102366106c5565b005b34801561024457600080fd5b5061024d6107b0565b60405161025a9190611296565b60405180910390f35b61026b6107ba565b005b34801561027957600080fd5b50610282610823565b60405161028f91906112b1565b60405180910390f35b3480156102a457600080fd5b506102ad61083d565b6040516102ba919061127b565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e59190610faa565b610849565b6040516102f79190611296565b60405180910390f35b34801561030c57600080fd5b50610315610861565b60405161032291906112b1565b60405180910390f35b34801561033757600080fd5b50610340610877565b60405161034d91906112b1565b60405180910390f35b34801561036257600080fd5b5061036b61088d565b604051610378919061119e565b60405180910390f35b34801561038d57600080fd5b5061039661091b565b6040516103a39190611296565b60405180910390f35b3480156103b857600080fd5b506103c1610921565b6040516103ce91906112b1565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f99190610fd7565b61093b565b60405161040b9190611183565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190610faa565b61097a565b60405161044891906111c0565b60405180910390f35b600080823b905060008111915050919050565b600560049054906101000a900463ffffffff1663ffffffff16600080549050106104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba9061121b565b60405180910390fd5b34600460008282546104d59190611316565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461052b9190611316565b92505081905550600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156105e55750670de0b6b3a76400006fffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156105f4576105f3336109d0565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d3460405161063a9190611296565b60405180910390a2565b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106e43373ffffffffffffffffffffffffffffffffffffffff16610451565b15610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b9061125b565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d906111fb565b60405180910390fd5b6107ae610ad6565b565b6000600454905090565b6107d93373ffffffffffffffffffffffffffffffffffffffff16610451565b15610819576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108109061125b565b60405180910390fd5b610821610464565b565b6000600560009054906101000a900463ffffffff16905090565b670de0b6b3a764000081565b60026020528060005260406000206000915090505481565b600560049054906101000a900463ffffffff1681565b600560009054906101000a900463ffffffff1681565b6060600080548060200260200160405190810160405280929190818152602001828054801561091157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c7575b5050505050905090565b60045481565b6000600560049054906101000a900463ffffffff16905090565b6000818154811061094b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560009054906101000a900463ffffffff1663ffffffff1660008054905011610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c906111db565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610bd557610bd433610ccb565b5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060046000828254610c2c919061136c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c79573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7582604051610cc09190611296565b60405180910390a250565b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d489061123b565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600080549050610da9919061136c565b9050808214610e97576000808281548110610dc757610dc6611472565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508060008481548110610e0957610e08611472565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000805480610f4657610f45611443565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600081359050610f8f816115bf565b92915050565b600081359050610fa4816115d6565b92915050565b600060208284031215610fc057610fbf6114a1565b5b6000610fce84828501610f80565b91505092915050565b600060208284031215610fed57610fec6114a1565b5b6000610ffb84828501610f95565b91505092915050565b6000611010838361101c565b60208301905092915050565b611025816113a0565b82525050565b611034816113a0565b82525050565b6000611045826112dc565b61104f81856112f4565b935061105a836112cc565b8060005b8381101561108b5781516110728882611004565b975061107d836112e7565b92505060018101905061105e565b5085935050505092915050565b6110a1816113b2565b82525050565b60006110b4603a83611305565b91506110bf826114a6565b604082019050919050565b60006110d7601d83611305565b91506110e2826114f5565b602082019050919050565b60006110fa602783611305565b91506111058261151e565b604082019050919050565b600061111d601283611305565b91506111288261156d565b602082019050919050565b6000611140601a83611305565b915061114b82611596565b602082019050919050565b61115f816113be565b82525050565b61116e816113fa565b82525050565b61117d81611404565b82525050565b6000602082019050611198600083018461102b565b92915050565b600060208201905081810360008301526111b8818461103a565b905092915050565b60006020820190506111d56000830184611098565b92915050565b600060208201905081810360008301526111f4816110a7565b9050919050565b60006020820190508181036000830152611214816110ca565b9050919050565b60006020820190508181036000830152611234816110ed565b9050919050565b6000602082019050818103600083015261125481611110565b9050919050565b6000602082019050818103600083015261127481611133565b9050919050565b60006020820190506112906000830184611156565b92915050565b60006020820190506112ab6000830184611165565b92915050565b60006020820190506112c66000830184611174565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611321826113fa565b915061132c836113fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561136157611360611414565b5b828201905092915050565b6000611377826113fa565b9150611382836113fa565b92508282101561139557611394611414565b5b828203905092915050565b60006113ab826113da565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f56616c696461746f72732063616e2774206265206c657373207468616e204d6960008201527f6e696d756d52657175697265644e756d56616c696461746f7273000000000000602082015250565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b6115c8816113a0565b81146115d357600080fd5b50565b6115df816113fa565b81146115ea57600080fd5b5056fea2646970667358221220d7e39e625d00c8128aa213ad39645e609537b7d500b147882d8a3fe0ab7f13a664736f6c63430008070033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	validators []types.Address,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))

	for indx, validator := range validators {
		// Update the total staked amount
		stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, int64(indx))

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> staked amount mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())

		// Set the value for the size of the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))
	}

	// Set the value for the minimum and maximum number of validators
	min := PadLeftOrTrim(bigMinNumValidators.Bytes(), 4)
	max := PadLeftOrTrim(bigMaxNumValidators.Bytes(), 4)
	storageMap[types.BytesToHash(big.NewInt(minAndMaxNumValidator).Bytes())] = types.BytesToHash(
		append(
			max,
			min...,
		),
	)

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
