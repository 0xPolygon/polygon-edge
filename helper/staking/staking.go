package staking

import (
	"fmt"
	"math/big"

	"github.com/0xPolygon/polygon-edge/helper/common"
	"github.com/0xPolygon/polygon-edge/validators"

	"github.com/0xPolygon/polygon-edge/chain"
	"github.com/0xPolygon/polygon-edge/helper/hex"
	"github.com/0xPolygon/polygon-edge/helper/keccak"
	"github.com/0xPolygon/polygon-edge/types"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	// Get the indexes for _validators, _stakedAmount
	// Index for regular types is calculated as just the regular slot
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	storageIndexes.ValidatorBLSPublicKeysIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorBLSPublicKeysSlot).Bytes(), 32)),
		uint64(index),
	)

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeysIndex  []byte // []bytes
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	validatorBLSPublicKeysSlot  = int64(7) // Slot 7
)

const (
	DefaultStakedBalance = "0x8AC7230489E80000" // 10 ETH
	//nolint: lll
	StakingSCBytecode = "0x6080604052600436106101185760003560e01c80637a6eea37116100a0578063d94c111b11610064578063d94c111b1461040a578063e387a7ed14610433578063e804fbf61461045e578063f90ecacc14610489578063facd743b146104c657610186565b80637a6eea37146103215780637dceceb81461034c578063af6da36e14610389578063c795c077146103b4578063ca1e7819146103df57610186565b8063373d6132116100e7578063373d6132146102595780633a4b66f1146102845780633c561f041461028e578063714ff425146102b957806372b338cb146102e457610186565b806302b751991461018b578063065ae171146101c85780632367f6b5146102055780632def66201461024257610186565b366101865761013c3373ffffffffffffffffffffffffffffffffffffffff16610503565b1561017c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017390611758565b60405180910390fd5b610184610516565b005b600080fd5b34801561019757600080fd5b506101b260048036038101906101ad919061132b565b6105ed565b6040516101bf91906117d3565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea919061132b565b610605565b6040516101fc91906116bb565b60405180910390f35b34801561021157600080fd5b5061022c6004803603810190610227919061132b565b610625565b60405161023991906117d3565b60405180910390f35b34801561024e57600080fd5b5061025761066e565b005b34801561026557600080fd5b5061026e610759565b60405161027b91906117d3565b60405180910390f35b61028c610763565b005b34801561029a57600080fd5b506102a36107cc565b6040516102b09190611699565b60405180910390f35b3480156102c557600080fd5b506102ce6108a5565b6040516102db91906117d3565b60405180910390f35b3480156102f057600080fd5b5061030b600480360381019061030691906113a1565b6108af565b60405161031891906116d6565b60405180910390f35b34801561032d57600080fd5b5061033661095b565b60405161034391906117b8565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e919061132b565b610967565b60405161038091906117d3565b60405180910390f35b34801561039557600080fd5b5061039e61097f565b6040516103ab91906117d3565b60405180910390f35b3480156103c057600080fd5b506103c9610985565b6040516103d691906117d3565b60405180910390f35b3480156103eb57600080fd5b506103f461098b565b6040516104019190611677565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190611358565b610a19565b005b34801561043f57600080fd5b50610448610adc565b60405161045591906117d3565b60405180910390f35b34801561046a57600080fd5b50610473610ae2565b60405161048091906117d3565b60405180910390f35b34801561049557600080fd5b506104b060048036038101906104ab91906113a1565b610aec565b6040516104bd919061165c565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e8919061132b565b610b2b565b6040516104fa91906116bb565b60405180910390f35b600080823b905060008111915050919050565b346004600082825461052891906118f4565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461057e91906118f4565b9250508190555061058e33610b81565b1561059d5761059c33610bf9565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d346040516105e391906117d3565b60405180910390a2565b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61068d3373ffffffffffffffffffffffffffffffffffffffff16610503565b156106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c490611758565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161074f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610746906116f8565b60405180910390fd5b610757610d48565b565b6000600454905090565b6107823373ffffffffffffffffffffffffffffffffffffffff16610503565b156107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b990611758565b60405180910390fd5b6107ca610516565b565b60606007805480602002602001604051908101604052809291908181526020016000905b8282101561089c57838290600052602060002001805461080f90611a24565b80601f016020809104026020016040519081016040528092919081815260200182805461083b90611a24565b80156108885780601f1061085d57610100808354040283529160200191610888565b820191906000526020600020905b81548152906001019060200180831161086b57829003601f168201915b5050505050815260200190600101906107f0565b50505050905090565b6000600554905090565b600781815481106108bf57600080fd5b9060005260206000200160009150905080546108da90611a24565b80601f016020809104026020016040519081016040528092919081815260200182805461090690611a24565b80156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b505050505081565b670de0b6b3a764000081565b60026020528060005260406000206000915090505481565b60065481565b60055481565b60606000805480602002602001604051908101604052809291908181526020018280548015610a0f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109c5575b5050505050905090565b610a2233610e9a565b610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5890611798565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160078281548110610aba57610ab9611b14565b5b906000526020600020019080519060200190610ad79291906111ee565b505050565b60045481565b6000600654905090565b60008181548110610afc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610b8c82610e9a565b158015610bf25750670de0b6b3a76400006fffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b60065460008054905010610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3990611718565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060046000828254610de3919061194a565b92505081905550610df333610e9a565b15610e0257610e0133610ef0565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e48573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7582604051610e8f91906117d3565b60405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60055460008054905011610f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3090611778565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690611738565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600080549050611017919061194a565b905080821461110557600080828154811061103557611034611b14565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000848154811061107757611076611b14565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054806111b4576111b3611ae5565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b8280546111fa90611a24565b90600052602060002090601f01602090048101928261121c5760008555611263565b82601f1061123557805160ff1916838001178555611263565b82800160010185558215611263579182015b82811115611262578251825591602001919060010190611247565b5b5090506112709190611274565b5090565b5b8082111561128d576000816000905550600101611275565b5090565b60006112a461129f84611813565b6117ee565b9050828152602081018484840111156112c0576112bf611b77565b5b6112cb8482856119e2565b509392505050565b6000813590506112e281611cd9565b92915050565b600082601f8301126112fd576112fc611b72565b5b813561130d848260208601611291565b91505092915050565b60008135905061132581611cf0565b92915050565b60006020828403121561134157611340611b81565b5b600061134f848285016112d3565b91505092915050565b60006020828403121561136e5761136d611b81565b5b600082013567ffffffffffffffff81111561138c5761138b611b7c565b5b611398848285016112e8565b91505092915050565b6000602082840312156113b7576113b6611b81565b5b60006113c584828501611316565b91505092915050565b60006113da83836113fa565b60208301905092915050565b60006113f283836114fa565b905092915050565b6114038161197e565b82525050565b6114128161197e565b82525050565b600061142382611864565b61142d818561189f565b935061143883611844565b8060005b8381101561146957815161145088826113ce565b975061145b83611885565b92505060018101905061143c565b5085935050505092915050565b60006114818261186f565b61148b81856118b0565b93508360208202850161149d85611854565b8060005b858110156114d957848403895281516114ba85826113e6565b94506114c583611892565b925060208a019950506001810190506114a1565b50829750879550505050505092915050565b6114f481611990565b82525050565b60006115058261187a565b61150f81856118c1565b935061151f8185602086016119f1565b61152881611b86565b840191505092915050565b600061153e8261187a565b61154881856118d2565b93506115588185602086016119f1565b61156181611b86565b840191505092915050565b6000611579601d836118e3565b915061158482611b97565b602082019050919050565b600061159c6027836118e3565b91506115a782611bc0565b604082019050919050565b60006115bf6012836118e3565b91506115ca82611c0f565b602082019050919050565b60006115e2601a836118e3565b91506115ed82611c38565b602082019050919050565b60006116056040836118e3565b915061161082611c61565b604082019050919050565b60006116286020836118e3565b915061163382611cb0565b602082019050919050565b6116478161199c565b82525050565b611656816119d8565b82525050565b60006020820190506116716000830184611409565b92915050565b600060208201905081810360008301526116918184611418565b905092915050565b600060208201905081810360008301526116b38184611476565b905092915050565b60006020820190506116d060008301846114eb565b92915050565b600060208201905081810360008301526116f08184611533565b905092915050565b600060208201905081810360008301526117118161156c565b9050919050565b600060208201905081810360008301526117318161158f565b9050919050565b60006020820190508181036000830152611751816115b2565b9050919050565b60006020820190508181036000830152611771816115d5565b9050919050565b60006020820190508181036000830152611791816115f8565b9050919050565b600060208201905081810360008301526117b18161161b565b9050919050565b60006020820190506117cd600083018461163e565b92915050565b60006020820190506117e8600083018461164d565b92915050565b60006117f8611809565b90506118048282611a56565b919050565b6000604051905090565b600067ffffffffffffffff82111561182e5761182d611b43565b5b61183782611b86565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006118ff826119d8565b915061190a836119d8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561193f5761193e611a87565b5b828201905092915050565b6000611955826119d8565b9150611960836119d8565b92508282101561197357611972611a87565b5b828203905092915050565b6000611989826119b8565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611a0f5780820151818401526020810190506119f4565b83811115611a1e576000848401525b50505050565b60006002820490506001821680611a3c57607f821691505b60208210811415611a5057611a4f611ab6565b5b50919050565b611a5f82611b86565b810181811067ffffffffffffffff82111715611a7e57611a7d611b43565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b7f4f6e6c792076616c696461746f722063616e2063616c6c2066756e6374696f6e600082015250565b611ce28161197e565b8114611ced57600080fd5b50565b611cf9816119d8565b8114611d0457600080fd5b5056fea26469706673582212200ea2eb49398fb24bebb3a8cd1de42d723897be3b916ea438069104e106f0ab7364736f6c63430008070033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
// TODO: update bytecode
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))

	for idx := 0; idx < vals.Len(); idx++ {
		validator := vals.At(uint64(idx))

		// Update the total staked amount
		stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, idx)

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		if blsValidator, ok := validator.(*validators.BLSValidator); ok {
			storageMap[types.BytesToHash(storageIndexes.ValidatorBLSPublicKeysIndex)] =
				types.BytesToHash(
					blsValidator.BLSPublicKey,
				)
		}

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> staked amount mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(idx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())
	}

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash([]byte{byte(validatorsSlot)})] =
		types.StringToHash(hex.EncodeUint64(uint64(vals.Len())))

	if _, ok := vals.(*validators.BLSValidators); ok {
		// Set the value for the size of the validator BLS Public Keys array
		storageMap[types.BytesToHash([]byte{byte(validatorBLSPublicKeysSlot)})] =
			types.StringToHash(hex.EncodeUint64(uint64(vals.Len())))
	}

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
