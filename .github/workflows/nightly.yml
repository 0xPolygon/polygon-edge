---
name: Nightly Build
on:  #yamllint disable-line rule:truthy
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 0 * * *'

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build.yml

  test:
    name: Test
    uses: ./.github/workflows/test.yml
    needs: build
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  e2e:
    name: PolyBFT E2E Tests
    uses: ./.github/workflows/e2e-polybft.yml
    needs: build

  e2eibft:
    name: IBFT E2E Tests
    uses: ./.github/workflows/e2e.yaml
    needs: build

  property:
    name: Polybft Property Tests
    uses: ./.github/workflows/property-polybft.yml
    needs: build

  fuzz:
    name: Fuzz Tests
    uses: ./.github/workflows/fuzz-test.yml
    needs: build

  loadtest:
    name: Build Devnet
    uses: ./.github/workflows/deploy.nightly.devnet.yml
    secrets:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      TF_VAR_DEPLOYMENT_NAME: ${{ secrets.TF_VAR_DEPLOYMENT_NAME }}
      TF_VAR_OWNER: ${{ secrets.TF_VAR_OWNER }}
      TF_VAR_BASE_INSTANCE_TYPE: ${{ secrets.TF_VAR_BASE_INSTANCE_TYPE }}
      SLACK_PERFORMANCE_WEBHOOK_URL: ${{ secrets.SLACK_PERFORMANCE_WEBHOOK_URL }}
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      LOADTEST_MNEMONIC: ${{ secrets.LOADTEST_MNEMONIC }}
      VAULT_PASSWORD_FILE: ${{ secrets.VAULT_PASSWORD_FILE }}
    with:
      environment: devnet
 
  notification:
    name: Nightly Notifications
    runs-on: ubuntu-latest
    needs: [build, test, e2e, e2eibft, property, fuzz, loadtest]
    if: success() || failure()
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_EDGE_GITHUB_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Nightly Build"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Status* ${{ needs.build.outputs.workflow_output == '' && needs.test.outputs.workflow_output == '' && needs.property.outputs.workflow_output == '' && needs.e2e.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Build ${{ needs.build.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Unit tests ${{ needs.test.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Property tests ${{ needs.property.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "E2E tests ${{ needs.e2e.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "E2E IBFT tests ${{ needs.e2eibft.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Fuzz tests ${{ needs.fuzz.outputs.workflow_output == '' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Load tests (multiple_EOA) ${{ needs.loadtest.outputs.workflow_output_loadtest1 == 'true' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Load tests (multiple_ERC20) ${{ needs.loadtest.outputs.workflow_output_loadtest2 == 'true' && ':white_check_mark:' || ':x: `failed`' }}"
                  }
                },
                {
                  "type": "divider"
                },  
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Results>"
                  }
                }
              ]
            }
