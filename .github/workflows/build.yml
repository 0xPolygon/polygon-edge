---
name: Build
on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  workflow_call:
   # Map the workflow outputs to job outputs
    outputs:
      workflow_output:
        description: "Build output"
        value: ${{ jobs.go_build.outputs.build_output_failure }} 

jobs:
  go_build:
    name: Polygon Edge
    runs-on: ubuntu-latest
    outputs:
      build_output_failure: ${{ steps.edge_build_failure.outputs.build_output }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Build Polygon Edge
        run: go build -tags netgo -ldflags="-s -w -linkmode external -extldflags "-static" -X \"github.com/0xPolygon/polygon-edge/versioning.Version=${GITHUB_REF_NAME}\" -X \"github.com/0xPolygon/polygon-edge/versioning.Commit=${GITHUB_SHA}\"" && tar -czvf polygon-edge.tar.gz polygon-edge
        env:
          CC: gcc
          CXX: g++
          GOARC: amd64
          GOOS: linux

      - name: Build Polygon Edge Failed
        if: failure()
        id: edge_build_failure
        run: echo "build_output=false" >> $GITHUB_OUTPUT

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: polygon-edge
          path: polygon-edge.tar.gz
          retention-days: 3

  go_build_reproducibility:
    name: Verify Build Reproducibility
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: 'Reproduce builds'
        continue-on-error: true
        run: |
          go build -o ./edge-1 -trimpath -buildvcs=false
          go build -o ./edge-2 -trimpath -buildvcs=false

          buildsha1=$(shasum -a256 ./edge-1 | awk '{print $1}')
          buildsha2=$(shasum -a256 ./edge-2 | awk '{print $1}')

          echo "Build 1 SHA: $buildsha1"
          echo "Build 2 SHA: $buildsha2"

          if [ "$buildsha1" != "$buildsha2" ]; then
            echo "Build artifact does not match original"
            exit 1
          else
            echo "Build artifact matches original"
          fi
