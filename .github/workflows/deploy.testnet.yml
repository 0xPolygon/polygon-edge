---
name: TestNet Workflow
on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  push:
    branches:
      - 'release/**'

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  snyk:
    name: Snyk and Publish
    uses: ./.github/workflows/security.yml
    secrets:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: ${{ secrets.SNYK_ORG }}

  build:
    uses: ./.github/workflows/build.yml
    name: Build

  test:
    uses: ./.github/workflows/test.yml
    name: Test
    needs: build

  container_image_build:
    name: Build/Push Container Image
    runs-on: ubuntu-latest
    environment: testnet
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download Polygon Edge Artifact
        uses: actions/download-artifact@v3
        with:
          name: polygon-edge
      - run: tar -xvzf polygon-edge.tar.gz

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: library/polygon-edge
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:testnet -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f Dockerfile.release .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:testnet

  deploy_testnet:
    name: Update TestNet
    needs: build
    concurrency: deploy_testnet
    environment:
      name: testnet
      url: https://rpc.us-east-1.tn.testing.psdk.io/
    runs-on: ubuntu-latest
    steps:
      - name: Download Polygon Edge Artifact
        uses: actions/download-artifact@v3
        with:
          name: polygon-edge

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.22.0
        continue-on-error: true
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Testnet Deployment - Started"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Testnet Deployment Status: ${{ job.status }}\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Job Status>"
                  }
                }
              ]
            }

      - name: Publish Binary package to S3
        run: |
          aws s3 cp ./polygon-edge.tar.gz s3://${{ secrets.POLYGON_EDGE_ARTIFACT_BUCKET }} --metadata "{\"commit_sha\":\"${GITHUB_SHA}\"}"
      - name: Deploy to Testnet
        continue-on-error: true
        env:
          VALIDATOR_ASGS: ${{ secrets.VALIDATOR_ASGS }}
        run: |
          echo "Deploying new TestNet..."
          for vasg in ${VALIDATOR_ASGS//,/ }
          do
              instance_id=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names  $vasg --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)

              echo "Draining $instance_id in $vasg"
              irid=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $vasg --query InstanceRefreshId --output text)

              echo "Waiting for instance to clear health check..."
              refresh_status=Pending
              until [ $refresh_status != "InProgress" ] && [ $refresh_status != "Pending" ]
              do
                  sleep 10
                  refresh_status=$(aws autoscaling describe-instance-refreshes --instance-refresh-ids $irid --auto-scaling-group-name $vasg --query 'InstanceRefreshes[0].Status' --output text)

                  echo "ASG: $vasg"
                  echo "Status: $refresh_status"
              done

              if [ "$refresh_status" != "Successful" ]
              then
                  echo "instance refresh failed."
                  echo "autoscaling group: $vasg"
                  echo "instance refresh id: $irid"
                  exit 1
              fi

              instance_id=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $vasg --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
              echo "-------------------------------------------------"
              echo "New validator: $instance_id successfully deployed"
              echo "-------------------------------------------------"

          done
          echo "Testnet Deployment Complete"

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.22.0
        continue-on-error: true
        if: ${{ job.status != 'success' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Testnet Deployment - Failed"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Job Status>"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Commit SHA: <${{ github.server_url }}/${{ github.repository }}/tree/${{ github.sha }}|${{ github.sha }}>\nPre-release: <${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name}}>"
                  }
                }
              ]
            }

  pandoras_box_eoa:
    uses: ./.github/workflows/pandoras_box.yml
    name: Pandora's Box EOA
    needs: deploy_testnet
    secrets:
      SLACK_PERFORMANCE_WEBHOOK_URL: ${{ secrets.SLACK_PERFORMANCE_WEBHOOK_URL }}
      PANDORAS_TARGET: ${{ secrets.PANDORAS_TARGET }}
      PANDORAS_MNEMONIC: ${{ secrets.PANDORAS_MNEMONIC }}
    with:
      runner: testnet
      environment: testnet
      transaction_batch: '200'
      transaction_count: '10000'
      mode: EOA
  pandoras_box_erc20:
    uses: ./.github/workflows/pandoras_box.yml
    name: Pandora's Box ERC20
    needs: deploy_testnet
    secrets:
      SLACK_PERFORMANCE_WEBHOOK_URL: ${{ secrets.SLACK_PERFORMANCE_WEBHOOK_URL }}
      PANDORAS_TARGET: ${{ secrets.PANDORAS_TARGET }}
      PANDORAS_MNEMONIC: ${{ secrets.PANDORAS_MNEMONIC }}
    with:
      runner: testnet
      environment: testnet
      transaction_batch: '200'
      transaction_count: '10000'
      mode: ERC20
  pandoras_box_erc721:
    uses: ./.github/workflows/pandoras_box.yml
    name: Pandora's Box ERC721
    needs: deploy_testnet
    secrets:
      SLACK_PERFORMANCE_WEBHOOK_URL: ${{ secrets.SLACK_PERFORMANCE_WEBHOOK_URL }}
      PANDORAS_TARGET: ${{ secrets.PANDORAS_TARGET }}
      PANDORAS_MNEMONIC: ${{ secrets.PANDORAS_MNEMONIC }}
    with:
      runner: testnet
      environment: testnet
      transaction_batch: '200'
      transaction_count: '10000'
      mode: ERC721
