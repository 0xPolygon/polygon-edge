---
name: Notification - Nightly
on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      environment:
        description: The environment to run against
        type: string
        required: true
      block_gas_limit:
        description: Block Gas Limit
        type: string
        required: true
      block_time:
        description: Block Time (sec)
        type: string
        required: true
      max_slots:
        description: Max Slots
        type: string
        required: true
      max_enqueued:
        description: Max Enqueued
        type: string
        required: true
      is_london_fork_active:
        description: EIP-1559
        type: boolean
        required: true
      is_bridge_active:
        description: With Bridge
        type: boolean
        required: true
      logs:
        description: Upload Logs
        type: string
        required: true
      build_blade_output:
        description: Build Blade output
        type: string
        required: true
      lint_output:
        description: Lint output
        type: string
        required: true
      unit_test_output:
        description: Unit Tests output
        type: string
        required: true
      e2e_polybft_test_output:
        description: E2E PolyBFT Tests output
        type: string
        required: true
      e2e_legacy_test_output:
        description: E2E Legacy Tests output
        type: string
        required: true
      property_polybft_test_output:
        description: Property PolyBFT Tests output
        type: string
        required: true
      fuzz_test_output:
        description: Fuzz Tests output
        type: string
        required: true
      benchmark_test_output:
        description: Benchmark Tests output
        type: string
        required: true
      deploy_network_terraform_output:
        description: Deploy Network - Terraform output
        type: string
        required: true
      deploy_network_ansible_output:
        description: Deploy Network - Ansible output
        type: string
        required: true
      load_test_multiple_eoa_output:
        description: Load Test multiple_EOA output
        type: string
        required: true
      load_test_multiple_erc20_output:
        description: Load Test multiple_ERC20 output
        type: string
        required: true
      destroy_network_logs_output:
        description: Deploy Network - Logs output
        type: string
        required: true
      destroy_network_terraform_output:
        description: Destroy Network - Terraform output
        type: string
        required: true
    secrets:
      AWS_S3_BLADE_BUCKET:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  notification:
    name: Notification
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Short SHA
        id: short_sha
        run: echo "value=`echo ${{ github.sha }} | cut -c1-7`" >> $GITHUB_OUTPUT
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          succeed_bnt: 'primary'
          failed_bnt: 'danger'
          succeed_job: ':green:'
          failed_job: ':red:'
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Nightly build"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Workflow Run"
                      },
                      "style": "${{ inputs.build_blade_output == '' && inputs.lint_output == '' && inputs.unit_test_output == '' && inputs.e2e_polybft_test_output == '' && inputs.e2e_legacy_test_output == '' && inputs.property_polybft_test_output == '' && inputs.fuzz_test_output == '' && inputs.benchmark_test_output == '' && inputs.deploy_network_terraform_output == '' && inputs.deploy_network_ansible_output == '' && inputs.load_test_multiple_eoa_output == 'true' && inputs.load_test_multiple_erc20_output == 'true' && inputs.destroy_network_logs_output == '' && inputs.destroy_network_terraform_output == '' && env.succeed_bnt || env.failed_bnt }}",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ inputs.logs == 'true' && inputs.destroy_network_logs_output == '' && 'Logs' || 'No Logs' }}"
                      },
                      "style": "${{ inputs.logs == 'true' && inputs.destroy_network_logs_output == '' && env.succeed_bnt || env.failed_bnt }}",
                      "url": "https://s3.console.aws.amazon.com/s3/buckets/${{ secrets.AWS_S3_BLADE_BUCKET }}?region=${{ vars.AWS_REGION }}&prefix=logs/${{ github.run_id }}/"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Triggered by: *${{ github.triggering_actor }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Commit: *<https://github.com/${{ github.repository }}/tree/${{ github.sha }}|${{ steps.short_sha.outputs.value }}>*"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Environment: *${{ inputs.environment }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Instances Type: *${{ vars.AWS_INSTANCE_TYPE }}*"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Validators: *${{ vars.VALIDATOR_COUNT }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Full Nodes: *${{ vars.FULLNODE_COUNT }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Rootchain servers: *${{ vars.GETH_COUNT }}*"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Block Gas Limit: *${{ inputs.block_gas_limit }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Block Time: *${{ inputs.block_time }}s*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Max Slots: *${{ inputs.max_slots }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Max Enqueued: *${{ inputs.max_enqueued }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Bridge: *${{ inputs.is_bridge_active }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "London: *${{ inputs.is_london_fork_active }}*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Log Level: *${{ vars.LOG_LEVEL }}*"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.build_blade_output == '' && env.succeed_job || env.failed_job }} *Build*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.lint_output == '' && env.succeed_job || env.failed_job }} *Lint*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.unit_test_output == '' && env.succeed_job || env.failed_job }} *Unit Tests*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.fuzz_test_output == '' && env.succeed_job || env.failed_job }} *Fuzz Tests*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.e2e_legacy_test_output == '' && env.succeed_job || env.failed_job }} *E2E Legacy Tests*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.e2e_polybft_test_output == '' && env.succeed_job || env.failed_job }} *E2E PolyBFT Tests*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.property_polybft_test_output == '' && env.succeed_job || env.failed_job }} *Property PolyBFT Tests*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.benchmark_test_output == '' && env.succeed_job || env.failed_job }} *Benchmark Tests*"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.deploy_network_terraform_output == '' && inputs.deploy_network_ansible_output == '' && env.succeed_job || env.failed_job }} *Deploy Network*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.benchmark_test_output == '' && env.succeed_job || env.failed_job }} *Destroy Network*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.load_test_multiple_eoa_output == 'true' && env.succeed_job || env.failed_job }} *Load Test EOA*"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ inputs.load_test_multiple_erc20_output == 'true' && env.succeed_job || env.failed_job }} *Load Test ERC20*"
                    }
                  ]
                }
              ]
            }
